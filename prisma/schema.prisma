generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model roles {
    id         String   @id @default(uuid()) @db.Uuid
    name       String
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt
    is_deleted Boolean  @default(false)
    users      users[]
}

model users {
    id           String              @id @default(uuid()) @db.Uuid
    username     String
    email        String              @unique
    password     String
    commission   Decimal?            @db.Decimal(3, 2)
    created_at   DateTime            @default(now())
    updated_at   DateTime            @default(now()) @updatedAt
    is_deleted   Boolean             @default(false)
    role         roles               @relation(fields: [role_id], references: [id])
    role_id      String              @db.Uuid
    client       customer_services[] @relation("client")
    professional customer_services[] @relation("professional")
}

model customer_services {
    id                String              @id @default(uuid()) @db.Uuid
    started_at        DateTime?
    finished_at       DateTime?
    created_at        DateTime            @default(now())
    updated_at        DateTime            @default(now()) @updatedAt
    is_deleted        Boolean             @default(false)
    client            users               @relation("client", fields: [client_id], references: [id])
    client_id         String              @db.Uuid
    professional      users               @relation("professional", fields: [professional_id], references: [id])
    professional_id   String              @db.Uuid
    selected_services selected_services[]
}

model clinics {
    id              String            @id @default(uuid()) @db.Uuid
    name            String
    created_at      DateTime          @default(now())
    updated_at      DateTime          @default(now()) @updatedAt
    is_deleted      Boolean           @default(false)
    clinic_services clinic_services[]
}

model services {
    id              String            @id @default(uuid()) @db.Uuid
    name            String
    category        String?
    price           Decimal           @db.Decimal(5, 2)
    estimated_time  Int               @db.Integer
    created_at      DateTime          @default(now())
    updated_at      DateTime          @default(now()) @updatedAt
    is_deleted      Boolean           @default(false)
    clinic_services clinic_services[]
}

model clinic_services {
    id                String              @id @default(uuid()) @db.Uuid
    clinic            clinics             @relation(fields: [clinic_id], references: [id])
    clinic_id         String              @db.Uuid
    service           services            @relation(fields: [service_id], references: [id])
    service_id        String              @db.Uuid
    created_at        DateTime            @default(now())
    updated_at        DateTime            @default(now()) @updatedAt
    is_deleted        Boolean             @default(false)
    selected_services selected_services[]
}

model selected_services {
    id                  String            @id @default(uuid()) @db.Uuid
    clinic_service      clinic_services   @relation(fields: [clinic_service_id], references: [id])
    clinic_service_id   String            @db.Uuid
    customer_service    customer_services @relation(fields: [customer_service_id], references: [id])
    customer_service_id String            @db.Uuid
    created_at          DateTime          @default(now())
    updated_at          DateTime          @default(now()) @updatedAt
    is_deleted          Boolean           @default(false)
}
